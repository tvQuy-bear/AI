# -*- coding: utf-8 -*-
"""BFS DFS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CoCJk-A-dBBAVSTmzX6S7qHG_uIydTNt
"""

class Node:
  def __init__(self, name, par = None):
    self.name = name
    self.par = par
  def display(self):
    print(self.name)

from collections import defaultdict

data = defaultdict(list)
data['A'] = ['B', 'C','D']
data['B'] = ['E', 'F']
data['C'] = ['G', 'H']
data['D'] = ['I', 'J']
data['F'] = ['K', 'L', 'M']
data['H'] = ['N', 'O']

def equal(O, G):
  return O.name == G.name
def checkInArray(tmp, open):
  for x in open:
    if equal(x, tmp):
      return True
    return False
def path(O):
  print(O.name)
  if O.par != None:
    path(O.par)
  else:
    return

def BFS(S = Node('A'), G = Node('M')):
  open = []
  closed = []
  open.append(S)
  while True:
    if len(open) == 0:
     print('Tìm kiếm thất bại')
     return
    O = open.pop(0)
    closed.append(O)
    if equal(O, G) ==True:
      print('Tìm kiếm thành công')
      path(O)
      return
    for x in data[O.name]:
      tmp = Node(x)
      tmp.par = O
      ok1 = checkInArray(tmp, open)
      ok2 = checkInArray(tmp, closed)
      if not ok1 and not ok2:
        open.append(tmp)

BFS(Node('A'), Node('M'))

def DFS(S = Node('A'), G = Node('M')):
  open = []
  closed = []
  open.append(S)

  while True:
    if len(open) == 0:
      print('Tìm kiếm thất bại')
      return
    O = open.pop()
    closed.append(O)

    print('Duyet: ', O.name)

    if equal(O, G) == True:
      print('Tìm kiếm thành công')
      path(O)
      return
    pos= 0
    for x in data[O.name]:
      tmp = Node(x)
      tmp.par = O
      ok1 = checkInArray(tmp, open)
      ok2 = checkInArray(tmp, closed)
      if not ok1 and not ok2:
        open.insert(pos, tmp)
      pos += 1

DFS(Node('A'), Node('N'))